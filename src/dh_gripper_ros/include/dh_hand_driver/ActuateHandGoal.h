// Generated by gencpp from file dh_hand_driver/ActuateHandGoal.msg
// DO NOT EDIT!


#ifndef DH_HAND_DRIVER_MESSAGE_ACTUATEHANDGOAL_H
#define DH_HAND_DRIVER_MESSAGE_ACTUATEHANDGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dh_hand_driver
{
template <class ContainerAllocator>
struct ActuateHandGoal_
{
  typedef ActuateHandGoal_<ContainerAllocator> Type;

  ActuateHandGoal_()
    : MotorID(0)
    , force(0)
    , position(0)  {
    }
  ActuateHandGoal_(const ContainerAllocator& _alloc)
    : MotorID(0)
    , force(0)
    , position(0)  {
  (void)_alloc;
    }



   typedef int32_t _MotorID_type;
  _MotorID_type MotorID;

   typedef int32_t _force_type;
  _force_type force;

   typedef int32_t _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ActuateHandGoal_

typedef ::dh_hand_driver::ActuateHandGoal_<std::allocator<void> > ActuateHandGoal;

typedef boost::shared_ptr< ::dh_hand_driver::ActuateHandGoal > ActuateHandGoalPtr;
typedef boost::shared_ptr< ::dh_hand_driver::ActuateHandGoal const> ActuateHandGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator1> & lhs, const ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator2> & rhs)
{
  return lhs.MotorID == rhs.MotorID &&
    lhs.force == rhs.force &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator1> & lhs, const ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dh_hand_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c453f1af3083362bd0e12d7cad7ad64";
  }

  static const char* value(const ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c453f1af3083362ULL;
  static const uint64_t static_value2 = 0xbd0e12d7cad7ad64ULL;
};

template<class ContainerAllocator>
struct DataType< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dh_hand_driver/ActuateHandGoal";
  }

  static const char* value(const ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Command to control the GRIPPERS\n"
"# author: Jie Sun <jie.sun@dh-robotics.com>, AUG 2018\n"
"# Copyright @ DH-Robotics\n"
"\n"
"\n"
"# goal definition\n"
"\n"
"int32 MotorID\n"
"int32 force\n"
"int32 position\n"
"\n"
;
  }

  static const char* value(const ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.MotorID);
      stream.next(m.force);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuateHandGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dh_hand_driver::ActuateHandGoal_<ContainerAllocator>& v)
  {
    s << indent << "MotorID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.MotorID);
    s << indent << "force: ";
    Printer<int32_t>::stream(s, indent + "  ", v.force);
    s << indent << "position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DH_HAND_DRIVER_MESSAGE_ACTUATEHANDGOAL_H
