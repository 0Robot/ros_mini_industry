// Generated by gencpp from file dh_hand_driver/ActuateHandResult.msg
// DO NOT EDIT!


#ifndef DH_HAND_DRIVER_MESSAGE_ACTUATEHANDRESULT_H
#define DH_HAND_DRIVER_MESSAGE_ACTUATEHANDRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dh_hand_driver
{
template <class ContainerAllocator>
struct ActuateHandResult_
{
  typedef ActuateHandResult_<ContainerAllocator> Type;

  ActuateHandResult_()
    : opration_done(false)  {
    }
  ActuateHandResult_(const ContainerAllocator& _alloc)
    : opration_done(false)  {
  (void)_alloc;
    }



   typedef uint8_t _opration_done_type;
  _opration_done_type opration_done;





  typedef boost::shared_ptr< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> const> ConstPtr;

}; // struct ActuateHandResult_

typedef ::dh_hand_driver::ActuateHandResult_<std::allocator<void> > ActuateHandResult;

typedef boost::shared_ptr< ::dh_hand_driver::ActuateHandResult > ActuateHandResultPtr;
typedef boost::shared_ptr< ::dh_hand_driver::ActuateHandResult const> ActuateHandResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dh_hand_driver::ActuateHandResult_<ContainerAllocator1> & lhs, const ::dh_hand_driver::ActuateHandResult_<ContainerAllocator2> & rhs)
{
  return lhs.opration_done == rhs.opration_done;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dh_hand_driver::ActuateHandResult_<ContainerAllocator1> & lhs, const ::dh_hand_driver::ActuateHandResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dh_hand_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bde7c7b62903bf30368eae067d2dee2";
  }

  static const char* value(const ::dh_hand_driver::ActuateHandResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bde7c7b62903bf3ULL;
  static const uint64_t static_value2 = 0x0368eae067d2dee2ULL;
};

template<class ContainerAllocator>
struct DataType< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dh_hand_driver/ActuateHandResult";
  }

  static const char* value(const ::dh_hand_driver::ActuateHandResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"# result definition\n"
"\n"
"bool opration_done\n"
"\n"
;
  }

  static const char* value(const ::dh_hand_driver::ActuateHandResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.opration_done);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuateHandResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dh_hand_driver::ActuateHandResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dh_hand_driver::ActuateHandResult_<ContainerAllocator>& v)
  {
    s << indent << "opration_done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.opration_done);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DH_HAND_DRIVER_MESSAGE_ACTUATEHANDRESULT_H
